#version 460 core

// Based on Call Of Duty Advanced Warfare method, presented at ACM Siggraph 2014.

layout(local_size_x = 16, local_size_y = 16) in;

uniform ivec2 srcResolution; 

layout(rgba32f, binding = 0) uniform image2D srcTexture;
layout(rgba32f, binding = 1) uniform image2D dstTexture;

vec3 Sample2x2(ivec2 texCoord){
    //bottom line
    vec3 a = imageLoad(srcTexture, texCoord + ivec2(0, 0)).rgb; 
    vec3 b = imageLoad(srcTexture, texCoord + ivec2(1, 0)).rgb;
    //top line
    vec3 c = imageLoad(srcTexture, texCoord + ivec2(0, 1)).rgb;
    vec3 d = imageLoad(srcTexture, texCoord + ivec2(1, 1)).rgb;

    return (a + b + c + d) * 0.25; 
}

void main(){
    ivec2 dstCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dstResolution = srcResolution / 2;

    if(dstCoord.x >= dstResolution.x || dstCoord.y >= dstResolution.y)
        return;

    ivec2 texCoordInt = dstCoord * 2;

    // 36-texel downsample (13 bilinear fetches)
    // A B C
    //  J K
    // D E F
    //  L M
    // G H I

    vec3 a = Sample2x2(texCoordInt + ivec2(-2, 2)).rgb;
    vec3 b = Sample2x2(texCoordInt + ivec2( 0, 2)).rgb;
    vec3 c = Sample2x2(texCoordInt + ivec2( 2, 2)).rgb;
    
    vec3 d = Sample2x2(texCoordInt + ivec2(-2, 0)).rgb;
    vec3 e = Sample2x2(texCoordInt + ivec2( 0, 0)).rgb;
    vec3 f = Sample2x2(texCoordInt + ivec2( 2, 0)).rgb;
    
    vec3 g = Sample2x2(texCoordInt + ivec2(-2, -2)).rgb;
    vec3 h = Sample2x2(texCoordInt + ivec2( 0, -2)).rgb;
    vec3 i = Sample2x2(texCoordInt + ivec2( 2, -2)).rgb;
    
    vec3 j = Sample2x2(texCoordInt + ivec2(-1, 1)).rgb;
    vec3 k = Sample2x2(texCoordInt + ivec2( 1, 1)).rgb;
    vec3 l = Sample2x2(texCoordInt + ivec2(-1, -1)).rgb;
    vec3 m = Sample2x2(texCoordInt + ivec2( 1, -1)).rgb;

    vec3 downsample = vec3(0.0);

    float div = 1.0 / 4.0;

    downsample += (a + b + d + e) * 0.125 * div;
    downsample += (d + e + g + h) * 0.125 * div;
    downsample += (b + c + e + f) * 0.125 * div;
    downsample += (e + f + h + i) * 0.125 * div;
    downsample += (j + k + l + m) * 0.5 * div;

    imageStore(dstTexture, dstCoord, vec4(downsample, 1.0));
}
